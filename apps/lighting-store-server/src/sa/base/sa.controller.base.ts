/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SAService } from "../sa.service";
import { SACreateInput } from "./SACreateInput";
import { SA } from "./SA";
import { SAFindManyArgs } from "./SAFindManyArgs";
import { SAWhereUniqueInput } from "./SAWhereUniqueInput";
import { SAUpdateInput } from "./SAUpdateInput";

export class SAControllerBase {
  constructor(protected readonly service: SAService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SA })
  async createSA(@common.Body() data: SACreateInput): Promise<SA> {
    return await this.service.createSa({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SA] })
  @ApiNestedQuery(SAFindManyArgs)
  async sas(@common.Req() request: Request): Promise<SA[]> {
    const args = plainToClass(SAFindManyArgs, request.query);
    return this.service.sas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SA })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sa(@common.Param() params: SAWhereUniqueInput): Promise<SA | null> {
    const result = await this.service.sa({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SA })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSA(
    @common.Param() params: SAWhereUniqueInput,
    @common.Body() data: SAUpdateInput
  ): Promise<SA | null> {
    try {
      return await this.service.updateSa({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SA })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSA(
    @common.Param() params: SAWhereUniqueInput
  ): Promise<SA | null> {
    try {
      return await this.service.deleteSa({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
